// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/ecs/run_task_request.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	gomock "github.com/golang/mock/gomock"
)

// MockecsServiceDescriber is a mock of ecsServiceDescriber interface.
type MockecsServiceDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockecsServiceDescriberMockRecorder
}

// MockecsServiceDescriberMockRecorder is the mock recorder for MockecsServiceDescriber.
type MockecsServiceDescriberMockRecorder struct {
	mock *MockecsServiceDescriber
}

// NewMockecsServiceDescriber creates a new mock instance.
func NewMockecsServiceDescriber(ctrl *gomock.Controller) *MockecsServiceDescriber {
	mock := &MockecsServiceDescriber{ctrl: ctrl}
	mock.recorder = &MockecsServiceDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockecsServiceDescriber) EXPECT() *MockecsServiceDescriberMockRecorder {
	return m.recorder
}

// NetworkConfiguration mocks base method.
func (m *MockecsServiceDescriber) NetworkConfiguration(cluster, serviceName string) (*ecs.NetworkConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConfiguration", cluster, serviceName)
	ret0, _ := ret[0].(*ecs.NetworkConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConfiguration indicates an expected call of NetworkConfiguration.
func (mr *MockecsServiceDescriberMockRecorder) NetworkConfiguration(cluster, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConfiguration", reflect.TypeOf((*MockecsServiceDescriber)(nil).NetworkConfiguration), cluster, serviceName)
}

// Service mocks base method.
func (m *MockecsServiceDescriber) Service(clusterName, serviceName string) (*ecs.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", clusterName, serviceName)
	ret0, _ := ret[0].(*ecs.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Service indicates an expected call of Service.
func (mr *MockecsServiceDescriberMockRecorder) Service(clusterName, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockecsServiceDescriber)(nil).Service), clusterName, serviceName)
}

// TaskDefinition mocks base method.
func (m *MockecsServiceDescriber) TaskDefinition(taskDefName string) (*ecs.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDefinition", taskDefName)
	ret0, _ := ret[0].(*ecs.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition.
func (mr *MockecsServiceDescriberMockRecorder) TaskDefinition(taskDefName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*MockecsServiceDescriber)(nil).TaskDefinition), taskDefName)
}

// MockserviceDescriber is a mock of serviceDescriber interface.
type MockserviceDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockserviceDescriberMockRecorder
}

// MockserviceDescriberMockRecorder is the mock recorder for MockserviceDescriber.
type MockserviceDescriberMockRecorder struct {
	mock *MockserviceDescriber
}

// NewMockserviceDescriber creates a new mock instance.
func NewMockserviceDescriber(ctrl *gomock.Controller) *MockserviceDescriber {
	mock := &MockserviceDescriber{ctrl: ctrl}
	mock.recorder = &MockserviceDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceDescriber) EXPECT() *MockserviceDescriberMockRecorder {
	return m.recorder
}

// ClusterARN mocks base method.
func (m *MockserviceDescriber) ClusterARN(app, env string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterARN", app, env)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterARN indicates an expected call of ClusterARN.
func (mr *MockserviceDescriberMockRecorder) ClusterARN(app, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterARN", reflect.TypeOf((*MockserviceDescriber)(nil).ClusterARN), app, env)
}

// NetworkConfiguration mocks base method.
func (m *MockserviceDescriber) NetworkConfiguration(app, env, svc string) (*ecs.NetworkConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConfiguration", app, env, svc)
	ret0, _ := ret[0].(*ecs.NetworkConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConfiguration indicates an expected call of NetworkConfiguration.
func (mr *MockserviceDescriberMockRecorder) NetworkConfiguration(app, env, svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConfiguration", reflect.TypeOf((*MockserviceDescriber)(nil).NetworkConfiguration), app, env, svc)
}

// TaskDefinition mocks base method.
func (m *MockserviceDescriber) TaskDefinition(app, env, svc string) (*ecs.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDefinition", app, env, svc)
	ret0, _ := ret[0].(*ecs.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition.
func (mr *MockserviceDescriberMockRecorder) TaskDefinition(app, env, svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*MockserviceDescriber)(nil).TaskDefinition), app, env, svc)
}

// MockjobDescriber is a mock of jobDescriber interface.
type MockjobDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockjobDescriberMockRecorder
}

// MockjobDescriberMockRecorder is the mock recorder for MockjobDescriber.
type MockjobDescriberMockRecorder struct {
	mock *MockjobDescriber
}

// NewMockjobDescriber creates a new mock instance.
func NewMockjobDescriber(ctrl *gomock.Controller) *MockjobDescriber {
	mock := &MockjobDescriber{ctrl: ctrl}
	mock.recorder = &MockjobDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjobDescriber) EXPECT() *MockjobDescriberMockRecorder {
	return m.recorder
}

// ClusterARN mocks base method.
func (m *MockjobDescriber) ClusterARN(app, env string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterARN", app, env)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterARN indicates an expected call of ClusterARN.
func (mr *MockjobDescriberMockRecorder) ClusterARN(app, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterARN", reflect.TypeOf((*MockjobDescriber)(nil).ClusterARN), app, env)
}

// NetworkConfigurationForJob mocks base method.
func (m *MockjobDescriber) NetworkConfigurationForJob(app, env, job string) (*ecs.NetworkConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConfigurationForJob", app, env, job)
	ret0, _ := ret[0].(*ecs.NetworkConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConfigurationForJob indicates an expected call of NetworkConfigurationForJob.
func (mr *MockjobDescriberMockRecorder) NetworkConfigurationForJob(app, env, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConfigurationForJob", reflect.TypeOf((*MockjobDescriber)(nil).NetworkConfigurationForJob), app, env, job)
}

// TaskDefinition mocks base method.
func (m *MockjobDescriber) TaskDefinition(app, env, job string) (*ecs.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDefinition", app, env, job)
	ret0, _ := ret[0].(*ecs.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition.
func (mr *MockjobDescriberMockRecorder) TaskDefinition(app, env, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*MockjobDescriber)(nil).TaskDefinition), app, env, job)
}
